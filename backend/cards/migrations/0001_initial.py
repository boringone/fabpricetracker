# Generated by Django 4.2.13 on 2024-06-11 18:12
import json
from typing import List, Dict, Any

import django.contrib.postgres.fields
from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations, models
import django.db.models.deletion
from django.db.models import Model


def get_set_for_card_printing(model, related_value):
    try:
        return model.objects.get(pk=related_value).set_obj
    except model.DoesNotExist:
        return ''


def get_foreign_key_model_for_card_printing(model, related_value):
    try:
        return model.objects.get(pk=related_value)
    except model.DoesNotExist:
        return ''


def load_json_content(file_name: str) -> List[Dict[str, str]]:
    with open(file_name, 'r', encoding='utf-8') as json_file:
        return json.load(json_file)


def insert_default_art_variation_data(apps, schema_editor) -> None:
    json_content = load_json_content(settings.JSON_ART_FILE_PATH)
    current_model = apps.get_model('cards.ArtVariation')
    for info in json_content:
        current_model.objects.create(**info)


def insert_default_rarity_data(apps, schema_editor) -> None:
    json_content = load_json_content(settings.JSON_RARITY_FILE_PATH)
    current_model = apps.get_model('cards.Rarity')
    for info in json_content:
        current_model.objects.create(**info)


def insert_default_foiling_data(apps, schema_editor) -> None:
    json_content = load_json_content(settings.JSON_FOILING_FILE_PATH)
    current_model = apps.get_model('cards.Foiling')
    # FOILING_TRANSLATION_DICT = {'S': 'Regular'}
    for info in json_content:
        # info['name'] = FOILING_TRANSLATION_DICT.get(info['name'])
        current_model.objects.create(**info)


def insert_default_edition_data(apps, schema_editor) -> None:
    json_content = load_json_content(settings.JSON_EDITION_FILE_PATH)
    current_model = apps.get_model('cards.Edition')
    for info in json_content:
        current_model.objects.create(**info)


def insert_set_printing_data(apps, set_printing_data: List[Dict[str, str]], set_obj) -> None:
    fields = ['unique_id', 'start_card_id', 'end_card_id', 'initial_release_date']
    model_fields = {}
    for printing_info in set_printing_data:
        model_fields['edition'] = get_foreign_key_model_for_card_printing(apps.get_model('cards.Edition'),
                                                                          printing_info.get('edition'))
        printing_info['initial_release_date'] = printing_info['initial_release_date'].split('T')[0] \
            if printing_info['initial_release_date'] else None
        apps.get_model('cards.SetPrinting').objects.create(
            **{k: v for k, v in printing_info.items() if k in fields}, **model_fields, set_obj=set_obj)


def insert_default_set_data(apps, schema_editor) -> None:
    json_content = load_json_content(settings.JSON_SET_FILE_PATH)
    current_model = apps.get_model('cards.Set')
    fields = ['unique_id', 'id', 'name']
    for info in json_content:
        set_obj = current_model.objects.create(**{k: v for k, v in info.items() if k in fields})
        insert_set_printing_data(apps, info.get('printings'), set_obj)


def insert_printing_data(apps, printing_model: Any, printing_data: List[Dict[str, str]],
                         card_obj_id: int) -> None:
    fields = ['unique_id', 'id', 'image_url']
    for printing_info in printing_data:
        model_fields = {
            'set': get_set_for_card_printing(apps.get_model('cards.SetPrinting'),
                                             printing_info.get('set_printing_unique_id')),
            'edition': get_foreign_key_model_for_card_printing(apps.get_model('cards.Edition'),
                                                               printing_info.get('edition')),
            'foiling': get_foreign_key_model_for_card_printing(apps.get_model('cards.Foiling'),
                                                               printing_info.get('foiling')),
            'rarity': get_foreign_key_model_for_card_printing(apps.get_model('cards.Rarity'),
                                                              printing_info.get('rarity')),
            'art_variation': get_foreign_key_model_for_card_printing(apps.get_model('cards.ArtVariation'),
                                                                     printing_info.get('art_variation'))}
        printing_model.objects.create(**{k: v for k, v in printing_info.items() if k in fields},
                                      **{k: v for k, v in model_fields.items() if v},
                                      card=card_obj_id)


def insert_default_card_and_printing_data(apps, schema_editor) -> None:
    with open(settings.JSON_CARDS_FILE_PATH, 'r', encoding='utf-8') as json_file:
        json_content = json.load(json_file)
    fields = ['unique_id',
              'name',
              'pitch',
              'cost',
              'power',
              'defense',
              'health',
              'intelligence',
              'types',
              'card_keywords',
              'abilities_and_effects',
              'ability_and_effect_keywords',
              'granted_keywords',
              'removed_keywords',
              'interacts_with_keywords',
              'functional_text',
              'functional_text_plain',
              'type_text', ]
    card_model = apps.get_model('cards.BasicCard')
    printing_model = apps.get_model('cards.CardPrinting')
    for card_info in json_content:
        card_obj = card_model.objects.create(**{k: v for k, v in card_info.items() if k in fields})
        insert_printing_data(apps, printing_model, card_info.get('printings'), card_obj)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ArtVariation',
            fields=[
                ('id', models.CharField(max_length=3, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='BasicCard',
            fields=[
                ('unique_id', models.CharField(max_length=21, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('pitch', models.CharField(max_length=10)),
                ('cost', models.CharField(max_length=10)),
                ('power', models.CharField(max_length=10)),
                ('defense', models.CharField(max_length=10)),
                ('health', models.CharField(max_length=10)),
                ('intelligence', models.CharField(max_length=10)),
                ('types', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('card_keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('abilities_and_effects', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('ability_and_effect_keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('granted_keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('removed_keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('interacts_with_keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('functional_text', models.CharField(max_length=10000)),
                ('functional_text_plain', models.CharField(max_length=10000)),
                ('type_text', models.CharField(max_length=1000)),
            ],
            options={
                'db_table': 'FabCards',
                'unique_together': {('name', 'pitch')},
            },
        ),
        migrations.CreateModel(
            name='Edition',
            fields=[
                ('id', models.CharField(max_length=2, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Foiling',
            fields=[
                ('id', models.CharField(max_length=2, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Rarity',
            fields=[
                ('id', models.CharField(max_length=2, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Set',
            fields=[
                ('unique_id', models.CharField(max_length=21, primary_key=True, serialize=False)),
                ('id', models.CharField(max_length=4)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='SetPrinting',
            fields=[
                ('unique_id', models.CharField(max_length=21, primary_key=True, serialize=False)),
                ('start_card_id', models.CharField(max_length=15)),
                ('end_card_id', models.CharField(max_length=15)),
                ('set_obj', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cards.set')),
                ('edition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cards.edition')),
                ('initial_release_date', models.DateField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CardPrinting',
            fields=[
                ('unique_id', models.CharField(max_length=21, primary_key=True, serialize=False)),
                ('id', models.CharField(max_length=8)),
                ('image_url', models.CharField(null=True, blank=False)),
                ('art_variation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cards.artvariation', null=True)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cards.basiccard')),
                ('edition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cards.edition')),
                ('foiling', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cards.foiling')),
                ('rarity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cards.rarity')),
                ('set', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cards.set')),
            ],
        ),
        migrations.RunPython(insert_default_art_variation_data),
        migrations.RunPython(insert_default_rarity_data),
        migrations.RunPython(insert_default_foiling_data),
        migrations.RunPython(insert_default_edition_data),
        migrations.RunPython(insert_default_set_data),
        migrations.RunPython(insert_default_card_and_printing_data),
    ]
